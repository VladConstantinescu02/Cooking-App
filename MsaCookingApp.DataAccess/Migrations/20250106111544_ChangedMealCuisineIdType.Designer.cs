// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MsaCookingApp.DataAccess.Context;

#nullable disable

namespace MsaCookingApp.DataAccess.Migrations
{
    [DbContext(typeof(MsaCookingAppDevContext))]
    [Migration("20250106111544_ChangedMealCuisineIdType")]
    partial class ChangedMealCuisineIdType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("ChallengeProfile", b =>
                {
                    b.Property<Guid>("ChallengesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParticipantProfilesId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChallengesId", "ParticipantProfilesId");

                    b.HasIndex("ParticipantProfilesId");

                    b.ToTable("ChallengeProfile");
                });

            modelBuilder.Entity("ChallengeSubmissionProfile", b =>
                {
                    b.Property<Guid>("ChallengeSubmissionsVotedId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProfilesThatVotedId")
                        .HasColumnType("TEXT");

                    b.HasKey("ChallengeSubmissionsVotedId", "ProfilesThatVotedId");

                    b.HasIndex("ProfilesThatVotedId");

                    b.ToTable("ChallengeSubmissionProfile");
                });

            modelBuilder.Entity("IngredientMeal", b =>
                {
                    b.Property<string>("IngredientsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MealsId")
                        .HasColumnType("TEXT");

                    b.HasKey("IngredientsId", "MealsId");

                    b.HasIndex("MealsId");

                    b.ToTable("IngredientMeal");
                });

            modelBuilder.Entity("IngredientProfile", b =>
                {
                    b.Property<Guid>("AllergicProfilesId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IngredientAllergiesId")
                        .HasColumnType("TEXT");

                    b.HasKey("AllergicProfilesId", "IngredientAllergiesId");

                    b.HasIndex("IngredientAllergiesId");

                    b.ToTable("IngredientProfile");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.Challenge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ChallengeStatusId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Day")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeStatusId");

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.ChallengeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ChallengeStatuses");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.ChallengeSubmission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ChallengeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ParticipantProfileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.HasIndex("ParticipantProfileId");

                    b.ToTable("ChallengeSubmissions");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.DietaryOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DietaryOptions");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.Fridge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Fridges");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.FridgeIngredient", b =>
                {
                    b.Property<Guid>("FridgeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("IngredientId")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<int>("IngredientMeasuringUnitId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Quantity")
                        .HasColumnType("REAL");

                    b.HasKey("FridgeId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("IngredientMeasuringUnitId");

                    b.ToTable("FridgeIngredients");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.Ingredient", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<double>("CaloriesPer100Grams")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.IngredientMeasuringUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("UnitSuffix")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("IngredientMeasuringUnits");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("MealCuisineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MealTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MealTypeId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RecipeDescription")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalCalories")
                        .HasColumnType("REAL");

                    b.Property<double>("TotalGrams")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("MealCuisineId");

                    b.HasIndex("MealTypeId");

                    b.HasIndex("MealTypeId1");

                    b.HasIndex("ProfileId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.MealCuisine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cuisine")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MealCuisines");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.MealType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MealTypes");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int?>("DietaryOptionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProfilePhotoUrl")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DietaryOptionId");

                    b.HasIndex("UserId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.WeeklyRanking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ChallengeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Day")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChallengeId");

                    b.ToTable("WeeklyRankings");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.WeeklyRankingProfileRank", b =>
                {
                    b.Property<Guid>("WeeklyRankingId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Rank")
                        .HasColumnType("INTEGER");

                    b.HasKey("WeeklyRankingId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("WeeklyRankingProfileRanks");
                });

            modelBuilder.Entity("ChallengeProfile", b =>
                {
                    b.HasOne("MsaCookingApp.DataAccess.Entities.Challenge", null)
                        .WithMany()
                        .HasForeignKey("ChallengesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MsaCookingApp.DataAccess.Entities.Profile", null)
                        .WithMany()
                        .HasForeignKey("ParticipantProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChallengeSubmissionProfile", b =>
                {
                    b.HasOne("MsaCookingApp.DataAccess.Entities.ChallengeSubmission", null)
                        .WithMany()
                        .HasForeignKey("ChallengeSubmissionsVotedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MsaCookingApp.DataAccess.Entities.Profile", null)
                        .WithMany()
                        .HasForeignKey("ProfilesThatVotedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IngredientMeal", b =>
                {
                    b.HasOne("MsaCookingApp.DataAccess.Entities.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MsaCookingApp.DataAccess.Entities.Meal", null)
                        .WithMany()
                        .HasForeignKey("MealsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IngredientProfile", b =>
                {
                    b.HasOne("MsaCookingApp.DataAccess.Entities.Profile", null)
                        .WithMany()
                        .HasForeignKey("AllergicProfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MsaCookingApp.DataAccess.Entities.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientAllergiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.Challenge", b =>
                {
                    b.HasOne("MsaCookingApp.DataAccess.Entities.ChallengeStatus", "ChallengeStatus")
                        .WithMany()
                        .HasForeignKey("ChallengeStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChallengeStatus");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.ChallengeSubmission", b =>
                {
                    b.HasOne("MsaCookingApp.DataAccess.Entities.Challenge", "Challenge")
                        .WithMany()
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MsaCookingApp.DataAccess.Entities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ParticipantProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.Fridge", b =>
                {
                    b.HasOne("MsaCookingApp.DataAccess.Entities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.FridgeIngredient", b =>
                {
                    b.HasOne("MsaCookingApp.DataAccess.Entities.Fridge", "Fridge")
                        .WithMany()
                        .HasForeignKey("FridgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MsaCookingApp.DataAccess.Entities.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MsaCookingApp.DataAccess.Entities.IngredientMeasuringUnit", "IngredientMeasuringUnit")
                        .WithMany()
                        .HasForeignKey("IngredientMeasuringUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fridge");

                    b.Navigation("Ingredient");

                    b.Navigation("IngredientMeasuringUnit");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.Meal", b =>
                {
                    b.HasOne("MsaCookingApp.DataAccess.Entities.MealCuisine", "MealCuisine")
                        .WithMany()
                        .HasForeignKey("MealCuisineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MsaCookingApp.DataAccess.Entities.MealType", null)
                        .WithMany()
                        .HasForeignKey("MealTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MsaCookingApp.DataAccess.Entities.MealType", "MealType")
                        .WithMany()
                        .HasForeignKey("MealTypeId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MsaCookingApp.DataAccess.Entities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MealCuisine");

                    b.Navigation("MealType");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.Profile", b =>
                {
                    b.HasOne("MsaCookingApp.DataAccess.Entities.DietaryOption", "DietaryOption")
                        .WithMany()
                        .HasForeignKey("DietaryOptionId");

                    b.HasOne("MsaCookingApp.DataAccess.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DietaryOption");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.WeeklyRanking", b =>
                {
                    b.HasOne("MsaCookingApp.DataAccess.Entities.Challenge", "Challenge")
                        .WithMany()
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Challenge");
                });

            modelBuilder.Entity("MsaCookingApp.DataAccess.Entities.WeeklyRankingProfileRank", b =>
                {
                    b.HasOne("MsaCookingApp.DataAccess.Entities.Profile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MsaCookingApp.DataAccess.Entities.WeeklyRanking", "WeeklyRanking")
                        .WithMany()
                        .HasForeignKey("WeeklyRankingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("WeeklyRanking");
                });
#pragma warning restore 612, 618
        }
    }
}
